name: Create built CURP package (wheel files) for PyPI distribution

on:
  push:
    tags:
      - "v*"

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build dependencies for ${{ matrix.os }}
        run: |
          if [[ ${{ matrix.os }} == "ubuntu-20.04" ]]; then
            sudo apt-get update
            sudo apt-get install -y build-essential gfortran libnetcdf-dev libhdf5-dev graphviz-dev libopenmpi-dev
          elif [[ ${{ matrix.os }} == "macos-13" ]]; then
            brew install gcc netcdf graphviz open-mpi
            # Ensure gfortran is linked correctly
            brew link --overwrite gcc
            # Add gfortran to PATH
            echo "export PATH=\"$(brew --prefix gcc)/bin:\$PATH\"" >> $GITHUB_ENV
          fi

      - name: Install auditwheel
        run: |
          pip install auditwheel

      - name: Verify gfortran installation
        run: |
          gfortran --version
          which gfortran

      - name: Build wheels using cibuildwheel
        uses: pypa/cibuildwheel@v2.22.0
        env:
          CIBW_ARCHS: x86_64
          CIBW_BUILD: cp36-*
          CIBW_BUILD_VERBOSITY: 3
        with:
          output-dir: ./dist
      
      - name: Check external libraries are bundled
        run: |
          for whl in dist/Curp-*.whl; do
            echo "=== Inspecting $whl ==="
            unzip -l "$whl" | grep "\.so" || echo "(No .so found)"
            auditwheel show "$whl"
            echo
          done

      - name: Upload artifacts to dist/ directory
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: ./dist/*.whl
  
  publish-to-testpypi:
    name: Publish to TestPyPI
    needs:
      - build_wheels
    runs-on: ubuntu-latest

    environment:
      name: testpypi
      url: https://test.pypi.org/p/curp-v2-test/

    permissions:
      id-token: write  # mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  github-release:
    name: Create GitHub Release
    needs:
      - publish-to-testpypi
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      
      - name: Create a release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} \
            --generate-notes \
            --title "Release for version ${{ github.ref_name }}" \
            --notes "Release notes for version ${{ github.ref_name }}"